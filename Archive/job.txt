clearscreen.
run langKernel. //Deklariere die "Language Konstanten."
set langCallerName to "job".
run DEBUG_Caller(langCallerName).

//##################################
//### Starte von der Startbahn 
//##################################
run libKerbal. //Soll die globalen Variablen für den Planeten deklarieren.
run lib7p08.   //Deklariere die "Flugzeug Konstanten"

//TODO: 2 Zeilen Footer , davon 1 Trennlienie und von der Terminalgröße ausgehen.
//run subConsoleFooter.

//Merke: Parameter sind 
set args TO LIST().
set args:ADD to libLaunchSpeedMin.
set args:ADD to libLaunchSpeedAutoMax.
set args:ADD to libLaunchGroundSteeringSpeedAutoMax.

//Merke: Der letzte Eintrag in der Liste ist das Hauptziel
set args:ADD to libTargPolNor.
set args:ADD to libTargKscRunEnd. 


set prgPlaneStart_Return to LIST(). //Rückgabewert, muss hier schon deklariert werden.
run prgPlaneStart (args,prgPlaneStart_Return).
run DEBUG_print("Startphase beendet. Anzahl ReturnWerte: " + prgPlaneStart_Return:LENGTH).

//Prüfe den Status des Programms
//a) Rückgabwerte entgegennehmen.
set iIndex to -1.
set prgPlaneStartStatus to "0".
for argReturn IN prgPlaneStart_Return {
	set sReturn to argReturn.
	run DEBUG_print("ReturnWert: " + sReturn). //argReturn gilt nur innerhalb der Schleife...
	set iIndex to iIndex + 1.
	if iIndex = 0 {
		set prgPlaneStartStatus to sReturn.		
		}.
	if iIndex = 1 {		
		}.
	if iIndex = 2 {
		}.
	}.
	
//b) Rückgabwerte analysieren.
if prgPlaneStartStatus = "1" {
	run DEBUG_print1("Startgeschwindigkeit zu spät erreicht. Bremse ab.").
	
		//Eingabearray leeren.
		run LIST_clear(args).
	
		LOCK THROTTLE TO 0.
		BRAKE On.
	
	}. //END START ERFOLGREICH
	
	
	
	if prgPlaneStartStatus = "2" {
		run DEBUG_print1("Erfolgreich hochgezogen. Nehme Kurs auf.").
		
		//Eingabearray leeren.
		run LIST_clear(args).
		
		//auch dass geht nicht args:CLEAR. //KEIN SET DAVOR
		//TODO: Das alte Ziel, bzw. die aktuelle Richtung uebergeben, wenn man den Kurs nicht errechnen kann.
		set iHeightGoal to 15000. //Sets desired height of plane.
		set iDistTargGoal to 2000. //Set desired distance to Target in meter.
		set args:add To iHeightGoal. 
		set args:add TO iDistTargGoal.
		set args:add TO libTargPolNor. //Nordpol als Ziel
		
		//Nun auf Höhe gehen und das Ziel ansteuern.
		set prgPlaneFlight_Return to LIST(). //Rückgabewert
		
		//TODO: solange der Start noch nicht klappt nicht automatisch weiter machen...
		run prgPlaneFlight(args,prgPlaneFlight_Return).
		
		//Prüfe den Status des Programms
		//a) Rückgabwerte entgegennehmen.
		set iIndex to -1.
		set prgPlaneFlightStatus to "0".
		for argReturn IN prgPlaneFlight_Return {
			set sReturn to argReturn.
			run DEBUG_print("ReturnWert: " + sReturn). //argReturn gilt nur innerhalb der Schleife...
			set iIndex to iIndex + 1.
			if iIndex = 0 {
				set prgPlaneFlightStatus to sReturn.		
				}.
			if iIndex = 1 {		
				}.
			if iIndex = 2 {
				}.
			}.
		
		
		if prgPlaneFlightStatus = "1" {
			run DEBUG_print("Auf Position.").
			UNLOCK STEERING.
			}.	
		if prgPlaneFlightStatus = "0" {
			run DEBUG_print("Nicht auf Kurs/Position.").
			UNLOCK STEERING.
			}.
		if prgPlaneFlightStatus = "-99" {
			run DEBUG_print( "ERROR beim Kursaufnehmen.").
			UNLOCK STEERING.
		}.
	}.
if prgPlaneStartStatus = "0" {
	run DEBUG_print("Nicht gestartet.").
	UNLOCK STEERING.
	}.
if prgPlaneStartStatus = "-99" {
	run DEBUG_print( "ERROR beim Start.").
	UNLOCK STEERING.
	}.








