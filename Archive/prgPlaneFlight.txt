//Program "Plane Flight"
//Steure ein Flugzeug auf das gewünschte Ziel, ghe dabe auf eine geplante Hoehe und halte diese.
DECLARE PARAMETER argsIn, prgPlaneFlight_Return.

//erwarte als erstes Argument: Das Ziel 
run DEBUG_Caller1("prgPlaneFlight").
set STATUSx to "-99".
set prgPlaneFlight_Return:ADD TO STATUSx.

//##########################
//In einer Schleife die Übergabebewerte den lokalen Variablen zuweisen.
//1. Die Startgeschwindigkeit aus der argsIn Liste holen.
//2. Die erlaubte Steuergeschwindigkeit am Boden.
run DEBUG_print1("Anzahl von Parametern in argsIn= " + argsIn:LENGTH).
set iIndex to -1.
for argIn IN argsIn {
	run DEBUG_print1("Wert: " + argIn). //argIn gilt nur innerhalb der Schleife...
	set iIndex to iIndex + 1.
	if iIndex = 0 {
		set iHeightGoal to argIn.
		run DEBUG_Caller("Height Goal = " + iHeightGoal).
		}.
	if iIndex = 1 {
		set iDistTargGoal to argIn.
		run DEBUG_Caller("DistTarg Goal = " + iDistTargGoal).
		}.
	if iIndex = 2 {
		//run printDebug("param@2 = " + argIn).
		//set targMain to argIn.
		}.
	}.
	
//######################
//TODO: Diese Werte in die lib der Maschine aufnehmen (lib7p08.txt)
set constHorizonUpMax to 40. //Die Maximalwerte fuer das Flugverhalten der Maschine.
set constHorizonUpNormal to 15.
set constHorizonDownMax to -20.
set constHorizonDownNormal to -5.

//Funktionen mit der Steuerung verknuepfen
LOCK THROTTLE to 1.
run STATUS_print1("STATUS=" + STATUS + " | Locked Throttel to 1").

set argsPitchShip to LIST().
run funPitchShip(argsPitchShip, funPitchShip_Return).
set horizonCurrent to funPitchShip_Return#0.
	
set argsGradeShip to LIST().
set funGradeShip_Return to List().
run funGradeShip(argsGradeShip, funGradeShip_Return).
set gradeCurrent to funGradeShip_Return#0.	

set shipSteer to LIST().
shipSteer:ADD to gradeCurrent.
shipSteer:ADD to horizonCurrent.
set shipSteer_return to List().
run SHIP_steer(shipSteer, shipSteer_return).


//######################################
//Das Hauptziel aus der argsIn Liste holen, es ist der letzte Eintrag der Liste.
Set listListReadEntryLast_Return TO LIST().
run LIST_readEntryLast(argsIn,listListReadEntryLast_Return).
set targMain to listListReadEntryLast_Return#0.
run DEBUG_print0("Hauptziel ermittelt!"). 

//########################################
set iCount to 0. //Messungszähler intern
set iCountStart to langCountGlobal.

set sMissionStepTxt to "INFLIGHT ".
//TODO: Den STATUS abfrufen und dadurch den Text in einer Funktion definierbar machen.
	
set bGradeGoal to 0.
set iCountSoft to 0.

set bHeightGoal to 0.	
set iCountSoftH to 0.

set bDistanceGoal to 0.

//Bis auf Zielnähe fliegen.
set bContinue to 0.
//until Round(targMain:DISTANCE)<=Round(iDistTargGoal) {


until bContinue >= 1 {
	
	//### Konsolenausgabe vorbereiten....	
	//+++ Aktuelle Werte für Richtung und Pitch, ausrechnen.
	set argsPitchShip to LIST().
	set funPitchShip_Return to List().
	run funPitchShip(argsPitchShip, funPitchShip_Return).
	set horizonCurrentENU to funPitchShip_Return#0.
	
	set argsGradeShip to LIST().
	set funGradeShip_Return to List().
	run funGradeShip(argsGradeShip, funGradeShip_Return).
	set gradeCurrentENU to funGradeShip_Return#0.	
	
	set argsShip to LIST().
	set argsShip:ADD To gradecurrent.  //Ausser beim 1. Lauf werden hier die geplanten/alten Werte übergeben...
	set argsShip:ADD To horizoncurrent.
	set argsShip:ADD To horizoncurrentENU.	 //Das ist dann der aktuelle Wert	
	set argsShip:ADD To gradecurrentENU.  //Das ist dann der aktuelle Wert	
	run subConsoleDataShip(argsShip).  
	
	//### Neue Plan-Werte ausrechnen, ausgehend von den aktuellen Werten
	set horizoncurrent to ROUND(horizonCurrentENU).
	set gradecurrent to ROUND(gradeCurrentENU).
	set iCount to iCount + 1.
	set langCountGlobal to iCountStart + iCount.  //Mit der globalen Zählvariablen werden die Unterprogramme und andere Teilprogramme versorgt.
	
	//+++ Entfernung zum Ziel
	//TODO GOON
	set bDistanceGoal to 0.
	
	//+++ Hoehenangabe	
	//Ziel: Bei niedriger Hoehe ggf. alt:radar verwenden, um Bergspitzen auszuweichen!
	//These lines determine if the object is flying over water. If it is, the object determins its height based on altitude, not radalt.
	//run STATUS_print("Hoehe: " + ALTITUDE).
	if ROUND(ALTITUDE) <= 4000 {		
		set height to alt:radar.
		if alt:radar < 0 {set height to ALTITUDE.}.
		if alt:radar > altitude {set height to ALTITUDE.}.
	}.	
	if ROUND(ALTITUDE) > 4000 {
		set height to ALTITUDE.
	}.
	run DEBUG_print1("Hoehenermittlung fertig!"). 
	
	//####################  Ziel: Langsam den Kurs aendern.
	if bHeightGoal = 1 { 
		run DEBUG_Caller0("Leichte Kursaenderung machen....").	
		set iCountSoft to iCountSoft + 2.     // 2 Grad korrektursteuerung.

		if iCountSoft >= 10 { set iCountSoft to 10. }. //Maximal 10 Grad Änderung
		set iBearing to targMain:BEARING.
		if ROUND(iBearing) > 0 {          //als String?, ist keine Zahl
			run STATUS_print1("... Korrektursteuern nach rechts...").			
			set gradeCurrent to gradeCurrent+iCountSoft. //+iBearing.   //rechts herum    //Doch tatsächlich +iBearing ??????
			
			set shipSteer to LIST().
			shipSteer:ADD to gradeCurrent.
			shipSteer:ADD to horizonCurrent.
			set shipSteer_return to List().
			run SHIP_steer(shipSteer, shipSteer_return).
		}.
		if ROUND(iBearing) <= 0 {		
			run STATUS_print1( "... Korrektursteuern nach links...").
			set gradeCurrent to gradeCurrent-iCountSoft. //-iBearing.   //links herum   //Doch tatsächlich + iBearing ??????
			
			set shipSteer to LIST().
			shipSteer:ADD to gradeCurrent.
			shipSteer:ADD to horizonCurrent.
			set shipSteer_return to List().
			run SHIP_steer(shipSteer, shipSteer_return).
		}.
		if ROUND(iBearing) = 0 {			
			run STATUS_print1("STATUS=" + STATUS).		
			run DEBUG_print1("").
			set bGradeGoal to 1.
			set iCountSoft to 0.
			
			set shipSteer to LIST().
			shipSteer:ADD to gradeCurrent.
			shipSteer:ADD to horizonCurrent.
			set shipSteer_return to List().
			run SHIP_steer(shipSteer, shipSteer_return).
		}.
	}. //if bHeightGoal=1.	
	//###########################
	run DEBUG_print1("Leichte Kursaenderung fertig!"). 
	
//Gesamtliste aller (anderen) Ziele
//TODO: Entferne aus der Liste das als Parameter uebergebene Haupt-Ziel.
//           Das als Funktion machen.
	SET listTarg TO LIST().   // Creates a new list in FOO variable
	SET listTarg:ADD TO libTargKscRunEnd.    // Adds a new element to the end of the list
	SET listTarg:ADD TO libTargPolNor.           //TODO: das müsste dann eigentlich rausfliegen!!!!!
	SET listTarg:ADD To targMain.					//Das letzte Element ist das Hauptziel
	run subConsoleDataTarget (listTarg).
	run DEBUG_Caller1("subConsoleDataTarget fertig").
	
	
	//Ziel: Höhe erreichen und dann halten
	//until SHIP:altitude >= iHeightGoal{
	run DEBUG_Caller0("Hoehensteuerung machen....").
	
	set bHeightGoal to 1.		
	//#########Ziel schneller Aufstieg
	if Round(height) < ROUND(iHeightGoal* 0.20) {  
		set sAltitudeControl to sMissionStepTxt + ": Schneller Aufstieg.".
		set bHeightGoal to 0.		
			
		set iCountSoftH to iCountSoftH + 1.	
		set horizonCurrentTemp To horizonCurrent + iCountSoftH.
	    if horizonCurrentTemp < -90 { set horizonCurrentTemp to -90. }.
	    if horizonCurrentTemp > 90 { set horizonCurrentTemp to 90. }.
		
		//Vermeide ueberschreiten der erlaubten Belastung & fliege gleichmaessiger
		if horizonCurrentTemp < 0  {				
				set horizonCurrentTemp to 0.
				set iCountSoftH to 0.
			}.		
		if horizonCurrentTemp > 0 {
			if horizonCurrentTemp < constHorizonUpNormal  {
				set horizonCurrentTemp to constHorizonUpNormal.
				set iCountSoftH to 0.
			}.		
		if horizonCurrentTemp > constHorizonUpMax  {
				set horizonCurrentTemp to constHorizonUpMax.
				set iCountSoftH to 0.
			}.			
		}.

		set shipSteer to LIST().
		shipSteer:ADD to gradeCurrent.
		shipSteer:ADD to horizonCurrentTemp.
		set shipSteer_return to List().
		run SHIP_steer(shipSteer, shipSteer_return).
	}.
	 //#########Ziel Hoehenkorridor halten
	if Round(height) >= ROUND(iHeightGoal* 0.20) { 
		set sAltitudeControl to sMissionStepTxt + ": Hoehenkorridor halten.".
		if ROUND(height) < ROUND(iHeightGoal - (iHeightGoal/10)) { 
			set sAltitudeControl to sMissionStepTxt + ": Langsam Hochziehen!".		
			set bHeightGoal to 0.
			
			set iCountSoftH to iCountSoftH + 1.	
			set horizonCurrentTemp To horizonCurrent + iCountSoftH.
			if horizonCurrentTemp < -90 { set horizonCurrentTemp to -90. }.
			if horizonCurrentTemp > 90 { set horizonCurrentTemp to 90. }.
			
			//Vermeide ueberschreiten der erlaubten Belastung & fliege gleichmaessiger
			if horizonCurrentTemp < 0  {
				set horizonCurrentTemp to 0.
				set iCountSoftH to 0.
			}.			
			if horizonCurrentTemp > 0 {
				if horizonCurrentTemp  > constHorizonUpNormal  {
					set horizonCurrentTemp to constHorizonUpNormal.
					set iCountSoftH to 0.
				}.
			}.
			set shipSteer to LIST().
			shipSteer:ADD to gradeCurrent.
			shipSteer:ADD to horizonCurrentTemp.
			set shipSteer_return to List().
			run SHIP_steer(shipSteer, shipSteer_return).
		}.
		
		if ROUND(height) > ROUND(iHeightGoal + (iHeightGoal/10)) { 
			set sAltitudeControl to sMissionStepTxt + ": Langsam Runterziehen!".
			set bHeightGoal to 0.
					
			set iCountSoftH to iCountSoftH + 1.	
			set horizonCurrentTemp To horizonCurrent - iCountSoftH.
			if horizonCurrentTemp < -90 { set horizonCurrentTemp to -90. }.
			if horizonCurrentTemp > 90 { set horizonCurrentTemp to 90. }.
			
			//Vermeide ueberschreiten der erlaubten Belastung & fliege gleichmaessiger
			if horizonCurrentTemp > 0  {
				set horizonCurrentTemp to 0.
				set iCountSoftH to 0.
			}.		
			if horizonCurrentTemp < 0 {
				if horizonCurrentTemp < constHorizonDownNormal  {
					set horizonCurrentTemp to constHorizonDownNormal.
					set iCountSoftH to 0.
				}.		
			}.
			set shipSteer to LIST().
			shipSteer:ADD to gradeCurrent.
			shipSteer:ADD to horizonCurrentTemp.
			set shipSteer_return to List().
			run SHIP_steer(shipSteer, shipSteer_return).
		}.
	}.
	if bHeightGoal = 1 {	
		//TODO: prüfen, ob der Surface:Velocity - Teil, (up-Wert) niedrig ist. Erst dann ist das Höhenziel tatsächlich erreicht!!!
		//            Ansonsten kann eine Kurskorrektur bewriken, dass der Vogel abstürzt.
	
		set iCountSoftH to 0. // set iCountSoft to iCountSoft + 1.  //muss das nicht auch set iCountSoft to 0. sein?
		set horizonCurrentTemp to 10.
		
		set shipSteer to LIST().
		shipSteer:ADD to gradeCurrent.
		shipSteer:ADD to horizonCurrentTemp.
		set shipSteer_return to List().
		run SHIP_steer(shipSteer, shipSteer_return).
	}.
	run DEBUG_Caller1("Hoehensteuerung fertig").
	run STATUS_print1(sAltitudeControl). 
	SAS ON.
		
	//Zielparameter erreicht?
	set bContinue to 1.
	if bGradeGoal = 0 { set bContinue to 0. }.
	if bHeightGoal = 0 { set bContinue to 0. }.	
	if bDistanceGoal = 0 { set bContinue to 0. }.
}.

Set STATUSx to "1".
set prgPlaneFlight_Return:REMOVE to 0.
set prgPlaneFlight_Return:ADD TO STATUSx.
	