//Program "Plane Start"
//Starte ein Flugzeug: 1) Beschleunige, 2) Ziehe hoch
DECLARE PARAMETER argsIn, prgPlaneStart_Return.

//erwarte als erstes Argument: Die startgeschwindigkeit.
run DEBUG_Caller1("prgPlaneStart").
set STATUSx to "-99".
set prgPlaneStart_Return:ADD TO STATUSx.

//##########################
//In einer Schleife die Übergabebewerte den lokalen Variablen zuweisen.
//1. Die Startgeschwindigkeit aus der argsIn Liste holen.
//2. Die erlaubte Steuergeschwindigkeit am Boden.
run DEBUG_print0("Anzahl von Parametern in argsIn= " + argsIn:LENGTH).
set iIndex to -1.
for argIn IN argsIn {
	run DEBUG_print0("Wert: " + argIn). //argIn gilt nur innerhalb der Schleife...
	set iIndex to iIndex + 1.
	if iIndex = 0 {
		set launchSpeedMin to argIn.
		run DEBUG_print0("LaunchSpeedMin = " + launchSpeedMin).
		}.
	if iIndex = 1 {
		set launchSpeedAutoMax to argIn.
		run DEBUG_print0("LaunchSpeedMaxAuto = " + launchSpeedAutoMax).
		}.	
	if iIndex = 2 {
		set launchSteeringSpeedAutoMax to argIn.
		run DEBUG_print0("LaunchSteeringSpeedAutoMax = " + launchSteeringSpeedAutoMax).
		}.	
	if iIndex = 3 {
		//run printDebug("param@2 = " + argIn).
		set targMain to argIn.
		}.
	}.


//################################
//LOCK THROTTLE to 1. //Vollschub wird im aufrufenden Programm schon gegeben.
set iCount to 0. //Messungszähler

//Liste mit den Argumenten an die ConsolenData-Ausbabe uebergeben!
set args to LIST().
set args:ADD to targMain.

//######################
//Funktionen mit der Steuerung verknuepfen
set horizonStart to 0.         //Horizont beim Start, TODO: Auslesen wie er wirklich ist.
set horizonCurrent to horizonStart.
//set gradeStart to targMain:HEADING.          //Richtung beim Start, TODO: Auslesen wie sie wirklich ist.
set gradeStart to targMain:BEARING.
set gradeCurrent to gradeStart.

//LOCK STEERING TO targMain.
set X to HEADING(horizonCurrent, gradeCurrent).     //gehe auf 90 Grad (startrichtung auf Startbahn), 55 Grad ?ber den Horizont
LOCK STEERING TO X.           // Steer the vessel in the direction suggested by direction X.

set W to HEADING(horizonCurrent, gradeCurrent).     //gehe auf 90 Grad (startrichtung auf Startbahn), 55 Grad ?ber den Horizont
//LOCK WHEELSTEERING TO targMain.           // Steer the vessel in the direction suggested by direction X.
LOCK WHEELSTEERING TO W.           // Steer the vessel in the direction suggested by direction X.

//Los geht´s....
stage. //Spare das Druecken der "Spacebar"-Taste 
BRAKES On.
BRAKES OFF. //Funktioniert alleine nicht.

set bIsFastEnough to 0.
set bIsLaunched to 0.
set bContinue to 0.
until bContinue >= 1 {	
	set iCount to iCount+1.//Achtung: Hier (in einem Unterprogram) deklarierte Variablen kann man nicht als globale Referenz uebergeben.
	set langCountGlobal to langCountGlobal+1.////Das ist der einzige Weg eine Zählvariable an eine Unterfunktion zu uebergeben. Die Variable ist in einem "ueberprogramm" deklariert und daher global
	run subConsoleDataStart(args).
	
	if ROUND(SHIP:SURFACESPEED) < MIN(launchSteeringSpeedAutoMax, launchSpeedAutoMax){
		//Korrektursteuerung
		set iCountSoft to 0.
		
		set gradeCurrent to targMain:HEADING. //TODO: fexibles Ziel, funktoniert das
		set iCountSoft to iCountSoft + 3.     // 3 Grad korrektursteuerung.
		if ROUND(targMain:BEARING) > 0 {
			SAS OFF. //sonst ist Steuern nicht möglich
			run STATUS_print("... Korrektursteuern nach rechts...").
			set gradeCurrent to gradeCurrent+iCountSoft.   //rechts herum
			if gradeCurrent > 360 { set gradeCurrent to 360. }.
		}.
		if ROUND(targMain:BEARING) < 0 {		
			SAS OFF. //sonst ist Steuern nicht möglich
			run STATUS_print( "... Korrektursteuern nach links...").
			set gradeCurrent to gradeCurrent-iCountSoft.   //links herum
			if gradeCurrent < 0 { set gradeCurrent to 0. }.
		}.
		if ROUND(targMain:BEARING = 0) {	
			SAS ON.//Merke: bei = 0 ist Steuern nicht notwendig.
		}.
		set X to HEADING(horizonCurrent, gradeCurrent).     //gehe auf 90 Grad (startrichtung auf Startbahn), 55 Grad ?ber den Horizont
		set W to HEADING(horizonCurrent, gradeCurrent).     //gehe auf 90 Grad (startrichtung auf Startbahn), 55 Grad ?ber den Horizont
	}. 
	
	
	//+++ Steuern, falls noch nicht zu schnell				
	//Unbedingt vor Tempo 100 versuchen hochzuziehen. Ggf. Antenne einziehen und Programm damit beenden.
	if abs(SHIP:surfacespeed) >= abs(launchSpeedAutoMax) {
		UNLOCK STEERING.
		run STATUS_print("AUTOMAX Startgeschwindigkeit erreicht. STEERING ist abgestellt. MANUELL HOCHZIEHEN.").
		SAS OFF.
	}.
	
	//Das wheelsteering korregieren nach dem Ziel beenden, ab einer bestimmten Geschwindigkeit.
	if abs(SHIP:surfacespeed) >= abs(launchGroundSteeringSpeedAutoMax) {
		UNLOCK WHEELSTEERING.
		run STATUS_print("AUTOMAX Steuereungsgeschwindigkeit erreicht. WHEELSTEERING ist abgestellt.").
		SAS OFF.
	}.
	
	if abs(SHIP:surfacespeed)	>= max(llaunchSpeedAutoMax, launchGroundSteeringSpeedAutoMax) {
	  run KOS_switchOff().)
	}. 
	
	if abs(SHIP:sufacespeed >= launchSpeedMin) {
	set bIsFastEnought to 1.
	Set STATUSx to "1".     //Automatisiert hochziehen
	}
	
	//abs(SHIP:surfacespeed) >= abs(launchSpeedMin)
	if Round(alt:radar) >= 100 {
	set bIsLaunched to 1.
	Set STATUSx to "2".    //Automatisiert weiterfliegen.
	}
	
	set bContinue to bIsLaunched + bIsFastEnough.
}.
set prgPlaneStart_Return:REMOVE to 0.
set prgPlaneStart_Return:ADD TO STATUSx.