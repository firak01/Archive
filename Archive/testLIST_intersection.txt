run DEBUG_Caller("testLIST_intersection").

set listMain to LIST().  //Merke: In der aufgerufenen Funktion muss der erste Parameter NICHT gleich heissen.
set listMain:ADD to "Apfel".
set listMain:ADD to "Birne".
set listMain:ADD to "Banane".
set listMain:ADD to "Pflaume".

set listListIntersection To LIST().  //Merke: In der aufgerufenen Funktion muss dieser Parameter gleich heissen.
set listListIntersection:ADD to "Banane".
set listListIntersection:ADD to "nicht da".

set listListIntersection_01 to LIST(). //Merke: In der aufgerufenen Funktion muss dieser Parameter gleich heissen.
run LIST_intersection(listMain, listListIntersection, listListIntersection_01).
//for ltemp in listList_intersection {
// print "Indexwert: " + ltemp.
// wait 1.
//}.
run DEBUG_print("+++ Testergebnis: ").

set listListCount_Return To LIST().
run LIST_count(listList_intersection_01,listListCount_Return).
set iLength to listListCount_Return#0.   //Rueckgabewert ist immer an Stelle 0.
run DEBUG_print("listList_intersection Laenge " + iLength). 

//nun kann man nicht mehr mit iLength als Zahlwert arbeiten!!!
//set iLengthB to countList#0.
if iLength=0 {
	print "LIST_intersection liefert zurueck: Keine Schnittmenge vorhanden".
	wait 1.
}.
if iLength!=0 {
	print "LIST_intersection liefert zurueck: Schnittmenge vorhanden".
	wait 1.
	
	for objB in listListIntersection_01 {
		print "uebernommen: " + objB. //geht... 		
		wait 1.
				
		//Merke: Mit Textwert kann man nicht vergleichen, aber mit dem Zahlenwert schon.
		if objB = 0 {
			print "LIST_intersection liefert zurueck: 0 (Zahlwert)".
		}.
		if objB = 1 {
			print "LIST_intersection liefert zurueck: 1 (Zahlwert)".
		}.
		if objB = 2 {
			print "LIST_intersection liefert zurueck: 2 (Zahlwert)".
		}.
		if objB = 3 {
			print "LIST_intersection liefert zurueck: 3 (Zahlwert)".
		}.
		if objB = 4 {
			print "LIST_intersection liefert zurueck: 4 (Zahlwert)".
		}.
		if objB >= 5 {
			print "LIST_intersection liefert einen Wert >= zurueck (Zahlwert)".
		}.
		wait 1.
	}.
}.
run STATUS_print("+++ Test LIST_intersection beendet +++ ").
